stages:
  - test
  - build
  - deploy

variables:
  PYTHON_IMAGE: python:3.9-slim
  RUST_IMAGE: rust:1.88

# -------------------------
# Test: Python Flask (isolated copy, no host writes)
# -------------------------
test_python:
  stage: test
  tags:
    - runner1
  script:
    # run tests inside container, mounting source read‑only and copying into tmpfs
    - docker run --rm \
        -v "$CI_PROJECT_DIR/Python":/src:ro \
        --tmpfs /app:rw \
        -w /app \
        $PYTHON_IMAGE \
        sh -euxc "\
          cp -r /src/* . && \
          pip install --no-cache-dir --prefix=/tmp/pip-temp -r requirements.txt && \
          PYTHONPATH=/tmp/pip-temp/lib/python3.9/site-packages \
            PYTHONDONTWRITEBYTECODE=1 \
            python test_app.py"

# -------------------------
# Test: Rust Actix (isolated copy, no host writes)
# -------------------------
test_rust:
  stage: test
  tags:
    - runner1
  script:
    # run tests inside container, mounting source read‑only and copying into tmpfs
    - docker run --rm \
        -v "$CI_PROJECT_DIR/Rust":/src:ro \
        --tmpfs /app:rw \
        -w /app \
        $RUST_IMAGE \
        sh -euxc "\
          cp -r /src/* . && \
          export CARGO_TARGET_DIR=/tmp/target && \
          cargo test"

# -------------------------
# Build: Python Image
# -------------------------
build_python:
  stage: build
  tags:
    - runner1
  script:
    - docker build -t microservices_python_app ./Python

# -------------------------
# Build: Rust Image
# -------------------------
build_rust:
  stage: build
  tags:
    - runner1
  script:
    - docker build -t microservices_rust_app ./Rust

# -------------------------
# Deploy: Docker Compose
# -------------------------
deploy:
  stage: deploy
  tags:
    - runner1
  script:
    - docker-compose up -d
